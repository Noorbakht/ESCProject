{"remainingRequest":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\src\\views\\ChatBot.vue?vue&type=style&index=0&id=078caa85&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\src\\views\\ChatBot.vue","mtime":1584793501797},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmNoYXQgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgaGVpZ2h0OiAxMDB2aDsNCn0NCi55b3Ugew0KICBtYXJnaW4tbGVmdDogYXV0byAhaW1wb3J0YW50Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbiAhaW1wb3J0YW50Ow0KfQ0KI2hlYWRlciB7DQogIGJhY2tncm91bmQtY29sb3I6ICNmMWYxZjE7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgZm9udC1zaXplOiA2MHB4Ow0KICB3aWR0aDogMTAwJTsNCiAgdHJhbnNpdGlvbjogMC4yczsNCn0NCi5jaGF0Qm94IHsNCiAgaGVpZ2h0OiAxMDAlOw0KICB3aWR0aDogMTAwJTsNCiAgb3ZlcmZsb3c6IGF1dG87DQogIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgLyogSW50ZXJuZXQgRXhwbG9yZXIgMTArICovDQogIHNjcm9sbGJhci13aWR0aDogbm9uZTsgLyogRmlyZWZveCAqLw0KfQ0KLmNoYXRCb3g6Oi13ZWJraXQtc2Nyb2xsYmFyIHsNCiAgZGlzcGxheTogbm9uZTsgLyogU2FmYXJpIGFuZCBDaHJvbWUgKi8NCn0NCi5mYWRlLWVudGVyLWFjdGl2ZSwNCi5mYWRlLWxlYXZlLWFjdGl2ZSB7DQogIHRyYW5zaXRpb246IG9wYWNpdHkgMC41czsNCn0NCi5mYWRlLWVudGVyLCAuZmFkZS1sZWF2ZS10byAvKiAuZmFkZS1sZWF2ZS1hY3RpdmUgYmVsb3cgdmVyc2lvbiAyLjEuOCAqLyB7DQogIG9wYWNpdHk6IDA7DQp9DQo="},{"version":3,"sources":["ChatBot.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChatBot.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"chat\">\r\n    <div class=\"chatBox\" id=\"chatBox\" ref=\"chatBox\">\r\n      <h1 class=\"font-weight-light mb-5\" id=\"header\" ref=\"header\">\r\n        Let's chat\r\n        <v-icon x-large color=\"black\">chat</v-icon>\r\n      </h1>\r\n      <v-card\r\n        class=\"ma-5 green white--text\"\r\n        v-bind:class=\"item.sender\"\r\n        flat\r\n        width=\"500px\"\r\n        v-for=\"item in items\"\r\n        :key=\"item.message\"\r\n      >\r\n        <v-card-subtitle class=\"white--text pb-0\">{{item.sender}}</v-card-subtitle>\r\n        <v-card-title style=\"word-break: keep-all\">{{ item.message }}</v-card-title>\r\n        <v-card-subtitle class=\"white--text text-right pr-2 pb-1\">{{item.time}}</v-card-subtitle>\r\n      </v-card>\r\n    </div>\r\n    <v-footer width=\"100%\" padless>\r\n      <v-textarea\r\n        v-model=\"txt\"\r\n        filled\r\n        hide-details\r\n        rows=\"1\"\r\n        loading\r\n        style=\"font-size: 1.25rem\"\r\n        color=\"green\"\r\n        auto-grow\r\n        placeholder=\"Send a message...\"\r\n      />\r\n      <v-btn @click=\"message\" height=\"58px\" x-large depressed tile class=\"green white--text\">\r\n        <h3>Send</h3>\r\n        <v-icon right>send</v-icon>\r\n      </v-btn>\r\n    </v-footer>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport $ from \"jquery\";\r\nimport moment from \"moment\";\r\nimport rainbowSDK from \"rainbow-web-sdk\";\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"Chatpage\",\r\n  components: {},\r\n  data: () => ({\r\n    token: \"\",\r\n    agentId: \"\",\r\n    agentName: \"Agent\",\r\n    chatting: false,\r\n    items: [\r\n      {\r\n        message:\r\n          \"Hi there! You've been connected with our agent. You may start typing to chat!\",\r\n        sender: \"Agent One\",\r\n        time: moment().format(\"h:mm a\")\r\n      }\r\n    ],\r\n    txt: \"\",\r\n    selectedIndex: 0,\r\n    conversation: \"\",\r\n    start: true,\r\n    connecting: false,\r\n    loading: 0\r\n  }),\r\n  methods: {\r\n    // getConnection: async function() {\r\n    //     // console.log(\"I'm in waitConnection\");\r\n    //     let response = await axios.get(\r\n    //         `http://still-sea-41149.herokuapp.com/api/agentss?category=${this.selectedIndex}` //obtain agent through category\r\n    //     );\r\n    //     this.agentId = response.data.agent.rainbowId; //get agent id\r\n    //     this.agentName = response.data.agent.name; //get agent name\r\n    //     this.token = response.data.token; //get guest token\r\n    //     console.log(\"agent ID is: \", this.agentId);\r\n    //     console.log(\"agent name is: \", this.agentName);\r\n    //     console.log(\"token is: \", this.token);\r\n    //     this.connecting=true;\r\n    //     //need to swap signin with token instead of admin login and password\r\n    //     this.loading=50;\r\n    //     let account = await rainbowSDK.connection.signinSandBoxWithToken(this.token); //login to rainbow server with guest token\r\n    //     this.loading=100;\r\n    //     if (account) {\r\n    //         let contact = await rainbowSDK.contacts.searchById(this.agentId); //get contact from agent id\r\n    //         this.conversation = await rainbowSDK.conversations.openConversationForContact(contact);\r\n    //         await rainbowSDK.im.getMessagesFromConversation(this.conversation); //getting all messages from conversation\r\n    //         this.start=false;\r\n    //         document.addEventListener(\r\n    //             rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED,\r\n    //             this.receive\r\n    //         );\r\n    //         document.addEventListener(\r\n    //             rainbowSDK.im.RAINBOW_ONNEWIMRECEIPTRECEIVED,\r\n    //             this.receipt\r\n    //         );\r\n    //     } else {\r\n    //         console.log(\"No account found!\");\r\n    //     }\r\n    // },\r\n    message() {\r\n      if (this.txt !== \"\") {\r\n        let message = this.txt;\r\n        this.chatting = true;\r\n        // this.items.push({message: this.txt, sender: \"you\", time: moment().format(\"h:mm a\")});\r\n        rainbowSDK.im.sendMessageToConversation(this.conversation, message);\r\n        this.items.push({\r\n          message: message,\r\n          sender: \"you\",\r\n          time: moment().format(\"h:mm a\")\r\n        });\r\n        this.txt = \"\";\r\n      }\r\n    },\r\n    receive: function(event) {\r\n      //this function works when u receive a message\r\n      let message = event.detail.message;\r\n      console.log(message.data);\r\n      console.log(message.side);\r\n      this.items.push({\r\n        message: message.data,\r\n        sender: \"agent\",\r\n        time: moment().format(\"h:mm a\")\r\n      });\r\n      $(\"#chatBox\").animate({ scrollTop: $(\"#chatBox\")[0].scrollHeight }, 500);\r\n    },\r\n    receipt: function(event) {\r\n      //this function works when u send out a message\r\n      let message = event.detail.message;\r\n      console.log(message.data);\r\n      console.log(message.side);\r\n      $(\"#chatBox\").animate({ scrollTop: $(\"#chatBox\")[0].scrollHeight }, 500);\r\n    }\r\n  },\r\n  mounted() {\r\n    const self = this;\r\n    window.addEventListener(\"keyup\", function(event) {\r\n      // invoke message on enter\r\n      if (event.keyCode === 13) {\r\n        self.message();\r\n      }\r\n    });\r\n    self.$refs[\"chatBox\"].onscroll = function() {\r\n      if (self.$refs[\"chatBox\"].scrollTop > 0) {\r\n        self.$refs[\"header\"].style.fontSize = \"0px\";\r\n      } else {\r\n        self.$refs[\"header\"].style.fontSize = \"40px\";\r\n      }\r\n    };\r\n    this.getConnection();\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chat {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n}\r\n.you {\r\n  margin-left: auto !important;\r\n  background-color: green !important;\r\n}\r\n#header {\r\n  background-color: #f1f1f1;\r\n  text-align: center;\r\n  font-size: 60px;\r\n  width: 100%;\r\n  transition: 0.2s;\r\n}\r\n.chatBox {\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow: auto;\r\n  -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n  scrollbar-width: none; /* Firefox */\r\n}\r\n.chatBox::-webkit-scrollbar {\r\n  display: none; /* Safari and Chrome */\r\n}\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\r\n  opacity: 0;\r\n}\r\n</style>\r\n"]}]}
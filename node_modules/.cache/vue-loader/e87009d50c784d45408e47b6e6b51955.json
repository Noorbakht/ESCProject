{"remainingRequest":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\src\\views\\Call.vue?vue&type=style&index=0&id=d58462d0&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\src\\views\\Call.vue","mtime":1586678708755},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmNhbGwgew0KICBkaXNwbGF5OiBmbGV4Ow0KICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOw0KICBhbGlnbi1pdGVtczogY2VudGVyOw0KICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgaGVpZ2h0OiAxMDB2aDsNCn0NCi5jYWxsQm94IHsNCiAgaGVpZ2h0OiAxMDAlOw0KICB3aWR0aDogMTAwJTsNCiAgZGlzcGxheTogZmxleDsNCiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogIGp1c3RpZnktaXRlbXM6IGNlbnRlcjsNCiAgYWxpZ24tY29udGVudDogY2VudGVyOw0KICBvdmVyZmxvdzogYXV0bzsNCn0NCi5hZ2VudC10ZXh0IHsNCiAgdGV4dC1hbGlnbjogY2VudGVyOw0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHdpZHRoOiAxMDAlOw0KICBtYXJnaW4tdG9wOiAxNTBweDsNCn0NCi5oZWFkZXIgew0KICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMWYxOw0KICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogIGZvbnQtc2l6ZTogNjBweDsNCiAgd2lkdGg6IDEwMCU7DQogIHRyYW5zaXRpb246IDAuMnM7DQp9DQouZmFkZS1lbnRlci1hY3RpdmUsDQouZmFkZS1sZWF2ZS1hY3RpdmUgew0KICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuNXM7DQp9DQouZmFkZS1lbnRlciwgLmZhZGUtbGVhdmUtdG8gLyogLmZhZGUtbGVhdmUtYWN0aXZlIGJlbG93IHZlcnNpb24gMi4xLjggKi8gew0KICBvcGFjaXR5OiAwOw0KfQ0K"},{"version":3,"sources":["Call.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Call.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"call\" id=\"call\">\r\n    <header class=\"header\">\r\n      Header\r\n      <audio id=\"globalAudioTag\" autoplay />\r\n      <!--to allow customer to receive audio from agent-->\r\n    </header>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport rainbowSDK from \"rainbow-web-sdk\";\r\n// import axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"Call\",\r\n  props: [\"agentId\"],\r\n  components: {},\r\n  data: () => ({\r\n    start: false,\r\n    connecting: false,\r\n    cancelled: false,\r\n    call: \"\",\r\n    exit: false\r\n  }),\r\n  mounted() {\r\n    console.log(this.$route.params.agentId);\r\n    let self = this;\r\n    self.checkCall();\r\n    if (self.agentId === \"\") {\r\n      console.log(\"trying\");\r\n    } else {\r\n      self.connecting = true;\r\n      self.startCall();\r\n    }\r\n  },\r\n  methods: {\r\n    checkCall: function() {\r\n      if (rainbowSDK.webRTC.canMakeAudioVideoCall()) {\r\n        console.log(\"Browser supports calls\");\r\n      } else {\r\n        console.log(\"Browser does not support calls\");\r\n      }\r\n      navigator.mediaDevices //authorise the application to access media device\r\n        .getUserMedia({ audio: true })\r\n        .then(function(stream) {\r\n          stream.getTracks().forEach(function(track) {\r\n            track.stop();\r\n          });\r\n          navigator.mediaDevices\r\n            .enumerateDevices()\r\n            .then(function(devices) {\r\n              devices.forEach(function(device) {\r\n                if (device.deviceId === \"default\") {\r\n                  console.log(device);\r\n                  console.log(device.label, \"is available\");\r\n                }\r\n              });\r\n            })\r\n            .catch(function(error) {\r\n              console.log(error);\r\n            });\r\n          rainbowSDK.webRTC.useMicrophone(\"default\");\r\n          rainbowSDK.webRTC.useSpeaker(\"default\");\r\n        })\r\n        .catch(function(error) {\r\n          console.log(error);\r\n        });\r\n    },\r\n    startCall: async function() {\r\n      let self = this;\r\n      try {\r\n        console.log(this.$route.params.agentId);\r\n        let contact = await rainbowSDK.contacts.searchById(\r\n          this.$route.params.agentId\r\n        );\r\n        var res = rainbowSDK.webRTC.callInAudio(contact); //start to call the contact with available agent\r\n        if (res.label === \"OK\") {\r\n          console.log(\"calling\");\r\n        }\r\n        self.start = true;\r\n        document.addEventListener(\r\n          rainbowSDK.webRTC.RAINBOW_ONWEBRTCCALLSTATECHANGED,\r\n          self.onWebRTCCallChanged\r\n        );\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n    onWebRTCCallChanged: async function(event) {\r\n      let self = this;\r\n      self.call = event.detail;\r\n      //console.log(\"OnWebRTCCallChanged event\", event.detail.status);\r\n      if (event.detail.status.value === \"Unknown\") {\r\n        document.removeEventListener(\r\n          rainbowSDK.webRTC.RAINBOW_ONWEBRTCCALLSTATECHANGED,\r\n          self.onWebRTCCallChanged\r\n        );\r\n        if (self.exit) {\r\n          await self.$router.push({ name: \"chatbot\" });\r\n        }\r\n      }\r\n    },\r\n    endCall: async function() {\r\n      let self = this;\r\n      self.exit = true;\r\n      await rainbowSDK.webRTC.release(self.call);\r\n      console.log(\"Session Ended\");\r\n    },\r\n    moveToChat: async function() {\r\n      console.log(\"moving to chat\");\r\n      await rainbowSDK.webRTC.release(this.call);\r\n      await this.$router.push({ name: \"chatbot\" });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.call {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100vh;\r\n}\r\n.callBox {\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  justify-items: center;\r\n  align-content: center;\r\n  overflow: auto;\r\n}\r\n.agent-text {\r\n  text-align: center;\r\n  position: absolute;\r\n  width: 100%;\r\n  margin-top: 150px;\r\n}\r\n.header {\r\n  background-color: #f1f1f1;\r\n  text-align: center;\r\n  font-size: 60px;\r\n  width: 100%;\r\n  transition: 0.2s;\r\n}\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity 0.5s;\r\n}\r\n.fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\r\n  opacity: 0;\r\n}\r\n</style>\r\n"]}]}
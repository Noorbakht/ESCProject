{"remainingRequest":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\src\\views\\ChatBot.vue?vue&type=style&index=0&id=078caa85&scoped=true&lang=scss&","dependencies":[{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\src\\views\\ChatBot.vue","mtime":1587269692042},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\noorb\\OneDrive\\Desktop\\StarterKit-SDKWeb-VueJS-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5jaGF0LWJveC1saXN0IHsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47DQogICAgbGlzdC1zdHlsZS10eXBlOiBub25lOw0KICAgIHBhZGRpbmctYm90dG9tOiA5MHB4Ow0KfQ0KLmNoYXQtYm94LWxpc3QtY29udGFpbmVyIHsNCiAgICBvdmVyZmxvdy15OiBzY3JvbGw7DQogICAgc2Nyb2xsYmFyLXdpZHRoOiBhdXRvOw0KICAgIG1hcmdpbi1ib3R0b206IDFweDsNCiAgICBvdmVyZmxvdy14OiBoaWRkZW47DQp9DQouY2hhdC1ib3gtbGlzdCB7DQogICAgcGFkZGluZy1sZWZ0OiAxMHB4Ow0KICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7DQogICAgc3BhbiB7DQogICAgICAgIHBhZGRpbmc6IDhweDsNCiAgICAgICAgY29sb3I6IHdoaXRlOw0KICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7DQogICAgfQ0KICAgIC5CYW5rIHsNCiAgICAgICAgc3BhbiB7DQogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjOTM3Y2NhOw0KICAgICAgICAgICAgcGFkZGluZzogMTZweDsNCiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgICAgIH0NCiAgICAgICAgcCB7DQogICAgICAgICAgICBmbG9hdDogcmlnaHQ7DQogICAgICAgIH0NCiAgICB9DQogICAgLmNsaWVudCB7DQogICAgICAgIHNwYW4gew0KICAgICAgICAgICAgYmFja2dyb3VuZDogIzQ4ZDM4MjsNCiAgICAgICAgICAgIHBhZGRpbmc6IDE2cHg7DQogICAgICAgICAgICBkaXNwbGF5OiBncmlkOw0KICAgICAgICB9DQogICAgICAgIC8vIHAgew0KICAgICAgICAvLyAgIGZsb2F0OiBsZWZ0Ow0KICAgICAgICAvLyB9DQogICAgfQ0KICAgIC5BZ2VudCB7DQogICAgICAgIHNwYW4gew0KICAgICAgICAgICAgYmFja2dyb3VuZDogc2FsbW9uOw0KICAgICAgICAgICAgcGFkZGluZzogMTZweDsNCiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7DQogICAgICAgIH0NCiAgICAgICAgLy8gcCB7DQogICAgICAgIC8vICAgZmxvYXQ6IGxlZnQ7DQogICAgICAgIC8vIH0NCiAgICB9DQp9DQouQmFuayB7DQogICAgbWFyZ2luLXJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7DQp9DQouY2xpZW50IHsNCiAgICBtYXJnaW4tbGVmdDogYXV0byAhaW1wb3J0YW50Ow0KfQ0KLkFnZW50IHsNCiAgICBtYXJnaW4tcmlnaHQ6IGF1dG8gIWltcG9ydGFudDsNCn0NCi5oZWFkZXIgew0KICAgIGJhY2tncm91bmQ6IHJnYigyLCAxMDYsIDE2Nyk7DQogICAgY29sb3I6ICNmZmY7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIHBhZGRpbmc6IDIwcHg7DQp9DQouZm9vdGVyIHsNCiAgICBwb3NpdGlvbjogZml4ZWQ7DQogICAgYm90dG9tOiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIGhlaWdodDogNTBweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2NjYzsNCn0NCi5pY29uIHsNCiAgICBtYXJnaW4tcmlnaHQ6IDYwMDBweDsNCiAgICBmb250LXNpemU6IDgwcHg7DQogICAgaGVpZ2h0OiAyMHB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7DQogICAgcGFkZGluZzogNDBweCA0NXB4IDQwcHggMzVweDsNCiAgICBsaW5lLWhlaWdodDogNXB4ICFpbXBvcnRhbnQ7DQogICAgdG9wOiAzMHB4Ow0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCn0NCi5pY29uMiB7DQogICAgbWFyZ2luLWxlZnQ6IDE1MDBweDsNCiAgICBmb250LXNpemU6IDgwcHg7DQogICAgaGVpZ2h0OiAyMHB4Ow0KICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7DQogICAgcGFkZGluZzogNDBweCA0NXB4IDQwcHggMzVweDsNCiAgICBsaW5lLWhlaWdodDogNXB4ICFpbXBvcnRhbnQ7DQogICAgdG9wOiAzMHB4Ow0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCn0NCiNwb3B1cCB7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIHdpZHRoOiAzMDBweDsNCiAgICBoZWlnaHQ6IDcwMHB4Ow0KICAgIHotaW5kZXg6IDE1Ow0KICAgIHRvcDogNTAlOw0KfQ0KLnN1Ym1pdCB7DQogICAgcG9zaXRpb246IGZpeGVkOw0KICAgIGJvdHRvbTogMjBweDsNCiAgICB3aWR0aDogNzBweDsNCiAgICBoZWlnaHQ6IDIwcHg7IC8qaGVpZ2h0OiBhdXRvOyovDQogICAgbWFyZ2luLWxlZnQ6IDc1MHB4Ow0KICAgIGJvcmRlcjogMHB4IHNvbGlkICNkNmQ2ZDY7DQogICAgei1pbmRleDogOTk7DQogICAgcGFkZGluZzogMDsNCiAgICBzaXplOiA1MDBweDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQoucmF0aW5nLXRleHQgew0KICAgIGZvbnQtd2VpZ2h0OiBib2xkOw0KICAgIGZvbnQtc2l6ZTogMS45ZW07DQogICAgYm9yZGVyOiAxcHggc29saWQgI2NmY2ZjZjsNCiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7DQogICAgcGFkZGluZy1yaWdodDogMTBweDsNCiAgICBib3JkZXItcmFkaXVzOiA1cHg7DQogICAgY29sb3I6ICM5OTk7DQp9DQouc3RhcnMgew0KICAgIG1hcmdpbi1ib3R0b206IDkwcHg7DQogICAgbWFyZ2luLXRvcDogNTBweDsNCn0NCnJvdXRlci1saW5rIHsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7DQp9DQo="},{"version":3,"sources":["ChatBot.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"ChatBot.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div class=\"chat\">\r\n        <transition name=\"fade\">\r\n            <Loading v-bind:isConnecting=\"isConnecting\" v-if=\"!start\" />\r\n        </transition>\r\n        <div class=\"chatBox\" id=\"chatBox\" ref=\"chatBox\">\r\n            <header class=\"header\">\r\n                <span class=\"icon\">\r\n                    <v-btn\r\n                        :to=\"{ name: 'feedback' }\"\r\n                        x-large\r\n                        name=\"toHomebutton\"\r\n                    >\r\n                        <i\r\n                            id=\"fontHouse\"\r\n                            class=\"fas fa-house-user\"\r\n                            name=\"toHomebutton\"\r\n                            fa-4x\r\n                        >\r\n                            <br />\r\n                            <a>Home</a>\r\n                        </i>\r\n                    </v-btn>\r\n                </span>\r\n                <h2>Chatting</h2>\r\n            </header>\r\n            <v-card flat class=\"chat-box-list-container\" ref=\"chatbox\" fluid>\r\n                <ul class=\"chat-box-list\" style=\"word-break: keep-all\">\r\n                    <li\r\n                        v-for=\"message in messages\"\r\n                        :key=\"message.text\"\r\n                        v-bind:class=\"message.author\"\r\n                    >\r\n                        <p>\r\n                            <v-container>\r\n                                <span>{{ message.text }}</span>\r\n                            </v-container>\r\n                        </p>\r\n                        <v-card-subtitle\r\n                            class=\"white--text text-right pr-2 pb-1\"\r\n                        >\r\n                            {{ message.author }}\r\n                            {{ message.time }}\r\n                        </v-card-subtitle>\r\n                    </li>\r\n                </ul>\r\n            </v-card>\r\n        </div>\r\n        <v-footer id=\"footer\" fixed width=\"100%\">\r\n            <v-textarea\r\n                auto-grow\r\n                name=\"msgbox\"\r\n                rows=\"2\"\r\n                placeholder=\"Start typing...\"\r\n                filled\r\n                type=\"text\"\r\n                v-model=\"txt\"\r\n            />\r\n            <v-btn name=\"msgbutton\" right height=\"60px\" @click=\"sendMessage\"\r\n                >Send</v-btn\r\n            >\r\n            <i\r\n                name=\"toCall\"\r\n                class=\"fas fa-phone-square fa-3x\"\r\n                @click=\"alert\"\r\n            ></i>\r\n        </v-footer>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport rainbowSDK from \"rainbow-web-sdk\";\r\nimport moment from \"moment\";\r\nimport axios from \"axios\";\r\nimport Loading from \"./Loading\";\r\nimport $ from \"jquery\";\r\n\r\nexport default {\r\n    name: \"Chatbot\",\r\n    props: [\"firstname\", \"lastname\"],\r\n    components: { Loading },\r\n    data: () => ({\r\n        agentId: \"\",\r\n        guestId: \"\",\r\n        file: \"\",\r\n        flag: false,\r\n        message: \"\",\r\n        icons: {\r\n            iconfont: \"md\"\r\n        },\r\n        imageUrl: \"\",\r\n        image: \"\",\r\n        txt: \"\",\r\n        skill: \"\",\r\n        isConnecting: false,\r\n        start: false,\r\n        selectedFile: \"\",\r\n        messages: [\r\n            {\r\n                text:\r\n                    \"Type #support for help or type #availability to see the number of agents currently available.\",\r\n                author: \"Bank\",\r\n                time: moment().format(\"h:mm a\"),\r\n                image: \"\"\r\n            }\r\n        ],\r\n        conversation: \"\"\r\n    }),\r\n    created() {\r\n        console.log(this.$route.params);\r\n        this.gettingConnection();\r\n    },\r\n    methods: {\r\n        //changed all the this to self including this.conversation\r\n        gettingConnection: async function() {\r\n            let self = this;\r\n            try {\r\n                let response = await axios.get(\r\n                    `https://limitless-sierra-11102.herokuapp.com/create_guest?firstName=${this.$route.params.firstname}&lastName=${this.$route.params.lastname}`\r\n                );\r\n                self.guestId = response.data.id;\r\n                self.email = response.data.loginEmail;\r\n                self.password = response.data.password;\r\n                console.log(\"this is guest id:\" + this.guestId);\r\n                console.log(this.email);\r\n                console.log(this.password);\r\n                if (this.guestId) {\r\n                    this.gettingConvo();\r\n                } else {\r\n                    console.log(\"can't find id\");\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        },\r\n        gettingConvo: async function() {\r\n            let self = this;\r\n            try {\r\n                await rainbowSDK.connection.signin(this.email, this.password);\r\n                console.log(\"signed in\");\r\n                //bot contact\r\n                let contact = await rainbowSDK.contacts.searchById(\r\n                    \"5e3298a2e9f12730636949d2\"\r\n                );\r\n                console.log(contact);\r\n                //open conversation for bot\r\n                self.conversation = await rainbowSDK.conversations.openConversationForContact(\r\n                    contact\r\n                );\r\n                console.log(self.conversation);\r\n                console.log(self.conversation.messages);\r\n                //detecting messages from bot\r\n                await rainbowSDK.im.getMessagesFromConversation(\r\n                    self.conversation\r\n                );\r\n                document.addEventListener(\r\n                    rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED,\r\n                    self.receive\r\n                );\r\n                self.start = true;\r\n                document.addEventListener(\r\n                    rainbowSDK.im.RAINBOW_ONNEWIMRECEIPTRECEIVED,\r\n                    self.receipt\r\n                );\r\n                console.log(this.guestId);\r\n                //get token id from agent backend\r\n                while (this.flag == false) {\r\n                    try {\r\n                        let response = await axios.get(\r\n                            `https://limitless-sierra-11102.herokuapp.com/establish_connection?id=${this.guestId}`\r\n                        );\r\n                        if (response.data.connection == true) {\r\n                            this.flag = true;\r\n                            this.agentComeIn();\r\n                        }\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        },\r\n        endChat: async function() {\r\n            let self = this;\r\n            this.$store.state.agentId = \"\";\r\n            console.log(this.$store.state.agentId);\r\n            await rainbowSDK.conversations.closeConversation(self.conversation);\r\n            console.log(\"closing\");\r\n        },\r\n        agentComeIn: async function() {\r\n            let self = this;\r\n            // document.removeEventListener(\r\n            //   rainbowSDK.im.RAINBOW_ONNEWIMRECEIPTRECEIVED,\r\n            //   self.receipt\r\n            // );\r\n            let response = await axios.get(\r\n                `https://limitless-sierra-11102.herokuapp.com/establish_connection?id=${this.guestId}`\r\n            );\r\n            console.log(response);\r\n            console.log(response.data.agentId);\r\n            console.log(response.data.connection);\r\n            console.log(response.data.skill);\r\n            this.$store.state.agentId = response.data.agentId;\r\n            console.log(this.$store.state.agentId);\r\n            this.skill = response.data.skill;\r\n            console.log(response);\r\n            self.agentId = response.data.agentId;\r\n            console.log(self.agentId);\r\n            let contact = await rainbowSDK.contacts.searchById(self.agentId);\r\n            console.log(contact);\r\n            self.conversation = await rainbowSDK.conversations.openConversationForContact(\r\n                contact\r\n            );\r\n            console.log(self.conversation);\r\n            console.log(self.conversation.messages);\r\n            await rainbowSDK.im.sendMessageToConversation(\r\n                this.conversation,\r\n                `Hello, I am ${this.$route.params.firstname} and I need help in ${this.skill} `\r\n            );\r\n            document.removeEventListener(\r\n                rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED,\r\n                self.receive\r\n            );\r\n            await rainbowSDK.im.getMessagesFromConversation(this.conversation);\r\n            document.addEventListener(\r\n                rainbowSDK.im.RAINBOW_ONNEWIMMESSAGERECEIVED,\r\n                self.receive1\r\n            );\r\n            document.addEventListener(\r\n                rainbowSDK.im.RAINBOW_ONNEWIMRECEIPTRECEIVED,\r\n                self.receipt\r\n            );\r\n        },\r\n        alert() {\r\n            this.$confirm(\r\n                \"Please only click this button once you have been connected to an agent. Do you want to call the agent instead to assist you?\"\r\n            ).then(() => {\r\n                //do something...\r\n                this.callingAgent();\r\n            });\r\n        },\r\n        callingAgent: async function() {\r\n            console.log(this.$store.state.agentId);\r\n            this.$router.push({\r\n                name: \"call\"\r\n            });\r\n        },\r\n        //allows user to send message onto chatbot\r\n        sendMessage() {\r\n            let self = this;\r\n            if (self.txt != \"\") {\r\n                let message = self.txt;\r\n                rainbowSDK.im.sendMessageToConversation(\r\n                    self.conversation,\r\n                    message\r\n                );\r\n                self.messages.push({\r\n                    text: message,\r\n                    author: \"client\",\r\n                    time: moment().format(\"h:mm a\")\r\n                });\r\n                $(\"html, body\").animate(\r\n                    { scrollTop: $(document).height() },\r\n                    \"slow\"\r\n                );\r\n                self.txt = \"\";\r\n            }\r\n        },\r\n        //when message received\r\n        receive: function(event) {\r\n            let self = this;\r\n            rainbowSDK.im.markMessageFromConversationAsRead(\r\n                event.detail.conversation,\r\n                event.detail.message\r\n            );\r\n            console.log(event.detail.message.data);\r\n            console.log(event.detail.message.side);\r\n            self.messages.push({\r\n                text: event.detail.message.data,\r\n                author: \"Bank\",\r\n                time: moment().format(\"h:mm a\")\r\n            });\r\n            $(\"html, body\").animate(\r\n                { scrollTop: $(document).height() },\r\n                \"slow\"\r\n            );\r\n        },\r\n        receive1: function(event) {\r\n            let self = this;\r\n            console.log(event.detail.message.data);\r\n            console.log(event.detail.message.side);\r\n            self.messages.push({\r\n                text: event.detail.message.data,\r\n                author: \"Agent\",\r\n                time: moment().format(\"h:mm a\")\r\n            });\r\n            $(\"html, body\").animate(\r\n                { scrollTop: $(document).height() },\r\n                \"slow\"\r\n            );\r\n        },\r\n        //when you send out message\r\n        receipt: function(event) {\r\n            console.log(\"receipt\");\r\n            console.log(event.detail.message.data);\r\n            console.log(event.detail.message.side);\r\n        }\r\n    },\r\n    mounted() {\r\n        const self = this;\r\n        window.addEventListener(\"keyup\", function(event) {\r\n            if (event.keyCode == 13) {\r\n                self.sendMessage();\r\n            }\r\n        });\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.chat-box-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    list-style-type: none;\r\n    padding-bottom: 90px;\r\n}\r\n.chat-box-list-container {\r\n    overflow-y: scroll;\r\n    scrollbar-width: auto;\r\n    margin-bottom: 1px;\r\n    overflow-x: hidden;\r\n}\r\n.chat-box-list {\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    span {\r\n        padding: 8px;\r\n        color: white;\r\n        border-radius: 4px;\r\n    }\r\n    .Bank {\r\n        span {\r\n            background: #937cca;\r\n            padding: 16px;\r\n            display: grid;\r\n        }\r\n        p {\r\n            float: right;\r\n        }\r\n    }\r\n    .client {\r\n        span {\r\n            background: #48d382;\r\n            padding: 16px;\r\n            display: grid;\r\n        }\r\n        // p {\r\n        //   float: left;\r\n        // }\r\n    }\r\n    .Agent {\r\n        span {\r\n            background: salmon;\r\n            padding: 16px;\r\n            display: grid;\r\n        }\r\n        // p {\r\n        //   float: left;\r\n        // }\r\n    }\r\n}\r\n.Bank {\r\n    margin-right: auto !important;\r\n}\r\n.client {\r\n    margin-left: auto !important;\r\n}\r\n.Agent {\r\n    margin-right: auto !important;\r\n}\r\n.header {\r\n    background: rgb(2, 106, 167);\r\n    color: #fff;\r\n    text-align: center;\r\n    padding: 20px;\r\n}\r\n.footer {\r\n    position: fixed;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 50px;\r\n    text-align: center;\r\n    background-color: #ccc;\r\n}\r\n.icon {\r\n    margin-right: 6000px;\r\n    font-size: 80px;\r\n    height: 20px;\r\n    vertical-align: middle;\r\n    padding: 40px 45px 40px 35px;\r\n    line-height: 5px !important;\r\n    top: 30px;\r\n    position: relative;\r\n}\r\n.icon2 {\r\n    margin-left: 1500px;\r\n    font-size: 80px;\r\n    height: 20px;\r\n    vertical-align: middle;\r\n    padding: 40px 45px 40px 35px;\r\n    line-height: 5px !important;\r\n    top: 30px;\r\n    position: relative;\r\n}\r\n#popup {\r\n    position: absolute;\r\n    width: 300px;\r\n    height: 700px;\r\n    z-index: 15;\r\n    top: 50%;\r\n}\r\n.submit {\r\n    position: fixed;\r\n    bottom: 20px;\r\n    width: 70px;\r\n    height: 20px; /*height: auto;*/\r\n    margin-left: 750px;\r\n    border: 0px solid #d6d6d6;\r\n    z-index: 99;\r\n    padding: 0;\r\n    size: 500px;\r\n    text-align: center;\r\n}\r\n.rating-text {\r\n    font-weight: bold;\r\n    font-size: 1.9em;\r\n    border: 1px solid #cfcfcf;\r\n    padding-left: 10px;\r\n    padding-right: 10px;\r\n    border-radius: 5px;\r\n    color: #999;\r\n}\r\n.stars {\r\n    margin-bottom: 90px;\r\n    margin-top: 50px;\r\n}\r\nrouter-link {\r\n    text-decoration: none;\r\n}\r\n</style>\r\n"]}]}